# Multi-stage build for unified frontend
FROM node:18-alpine as builder

# Build arguments
ARG VITE_API_BASE_URL=/tradingview-api
ARG VITE_ENVIRONMENT=production
ARG ENVIRONMENT=production

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY frontend/ .

# Set environment variables for build
ENV VITE_API_BASE_URL=$VITE_API_BASE_URL
ENV VITE_ENVIRONMENT=$VITE_ENVIRONMENT

# Build for production
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine as production

# Install envsubst and curl for health checks
RUN apk add --no-cache gettext curl

# Copy nginx template
COPY deployment/nginx.conf.template /etc/nginx/templates/default.conf.template

# Copy built app from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Set proper permissions
RUN chmod -R 755 /usr/share/nginx/html

# Environment variables for nginx template substitution
ENV BACKEND_SERVICE_NAME=${BACKEND_SERVICE_NAME:-tv-backend}
ENV API_PORT=${API_PORT:-8000}
ENV ENVIRONMENT=${ENVIRONMENT:-production}
ENV BACKEND_URL=${BACKEND_URL:-}
ENV APP_VERSION=${APP_VERSION:-1.0.0}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Create entrypoint script for dynamic configuration
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/sh
set -e

echo "Starting frontend in $ENVIRONMENT environment"
echo "Backend service: $BACKEND_SERVICE_NAME:$API_PORT"
echo "Backend URL override: ${BACKEND_URL:-none}"

# Start nginx with template substitution
exec nginx-debug -g 'daemon off;'
EOF

RUN chmod +x /docker-entrypoint.sh

# Expose port
EXPOSE 80

# Start with dynamic configuration
CMD ["/docker-entrypoint.sh"]