version: '3.8'

services:
  # Production Database
  postgres-prod:
    image: timescale/timescaledb:latest-pg15
    container_name: tv-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-stocksblitz_unified_prod}
      POSTGRES_USER: ${DB_USER:-stocksblitz}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TIMESCALEDB_TELEMETRY: "off"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    ports:
      - "5437:5432"  # Non-conflicting port
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-stocksblitz}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production Redis
  redis-prod:
    image: redis:7-alpine
    container_name: tv-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    ports:
      - "6384:6379"  # Non-conflicting port
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Production Backend
  backend-prod:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: tv-backend-prod
    environment:
      DB_HOST: postgres-prod
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-stocksblitz_unified_prod}
      DB_USER: ${DB_USER:-stocksblitz}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis-prod:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: INFO
    ports:
      - "8080:8000"  # Port 8080 for production backend (avoiding 80 conflict)
    depends_on:
      postgres-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    restart: unless-stopped

  # Production Frontend
  frontend-prod:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: tv-frontend-prod
    environment:
      - VITE_API_URL=http://5.223.52.98:8080
      - VITE_ENVIRONMENT=production
    ports:
      - "8081:3000"  # Port 8081 for production frontend (avoiding 80 conflict)
    depends_on:
      - backend-prod
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  default:
    name: tradingview-production-network