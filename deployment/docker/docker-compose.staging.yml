version: '3.8'

services:
  # Staging Database
  postgres-staging:
    image: timescale/timescaledb:latest-pg15
    container_name: tv-postgres-staging
    environment:
      POSTGRES_DB: ${DB_NAME:-stocksblitz_unified_staging}
      POSTGRES_USER: ${DB_USER:-stocksblitz}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ../database/backup-restore.sh:/docker-entrypoint-initdb.d/01-restore.sh
    ports:
      - "5434:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-stocksblitz}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Staging Redis
  redis-staging:
    image: redis:7-alpine
    container_name: tv-redis-staging
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_staging_data:/data
    ports:
      - "6381:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Staging Backend
  backend-staging:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-tradingview-ml-viz}-backend:${TAG:-latest}
    container_name: tv-backend-staging
    environment:
      DB_HOST: postgres-staging
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-stocksblitz_unified_staging}
      DB_USER: ${DB_USER:-stocksblitz}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis-staging:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      ENVIRONMENT: staging
      DEBUG: false
      LOG_LEVEL: INFO
      CORS_ORIGINS: ${STAGING_FRONTEND_URL}
    ports:
      - "8002:8000"
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Staging Frontend
  frontend-staging:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-tradingview-ml-viz}-frontend:${TAG:-latest}
    container_name: tv-frontend-staging
    environment:
      - API_URL=http://backend-staging:8000
    ports:
      - "3002:80"
    depends_on:
      - backend-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer for staging
  nginx-staging:
    image: nginx:alpine
    container_name: tv-nginx-staging
    volumes:
      - ./nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_CERT_PATH}:/etc/ssl/certs/
      - ${SSL_KEY_PATH}:/etc/ssl/private/
    ports:
      - "443:443"
      - "8080:80"
    depends_on:
      - frontend-staging
      - backend-staging
    restart: unless-stopped

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local

networks:
  default:
    name: tradingview-staging-network