{
  "rtm_version": "1.0.0",
  "metadata": {
    "generated_at": "2025-10-24T04:20:00Z",
    "generated_by": "Claude Code RTM Generator",
    "project": {
      "name": "TradingView ML Visualization System",
      "id": "tv-ml-viz",
      "repository": "github.com/raghurammutya/ML",
      "version": "1.0.0",
      "description": "High-performance web application for visualizing Nifty50 OHLC data with ML-generated sentiment labels using TradingView's Advanced Chart widget"
    }
  },
  "components": [
    {
      "id": "COMP-001",
      "name": "Backend API Server",
      "type": "backend_service",
      "deployment_unit": "tv-backend",
      "path": "backend",
      "technology": "FastAPI/Python",
      "description": "Main REST API server implementing TradingView UDF protocol",
      "entry_point": "backend/app/main.py"
    },
    {
      "id": "COMP-002",
      "name": "Frontend Application",
      "type": "web_application",
      "deployment_unit": "tv-frontend",
      "path": "frontend",
      "technology": "React/TypeScript",
      "description": "Web application for TradingView chart visualization",
      "entry_point": "frontend/src/main.tsx"
    },
    {
      "id": "COMP-003",
      "name": "Database Layer",
      "type": "database",
      "deployment_unit": "tv-postgres",
      "path": "deployment/database",
      "technology": "TimescaleDB/PostgreSQL",
      "description": "Time-series database for OHLC data and ML labels",
      "entry_point": "deployment/database/init-dev.sql"
    },
    {
      "id": "COMP-004",
      "name": "Cache Layer",
      "type": "data_store",
      "deployment_unit": "tv-redis",
      "path": "backend/app/cache.py",
      "technology": "Redis",
      "description": "Three-layer caching system for performance optimization",
      "entry_point": "backend/app/cache.py"
    },
    {
      "id": "COMP-005",
      "name": "Deployment Infrastructure",
      "type": "infrastructure",
      "deployment_unit": "docker-compose",
      "path": "deployment",
      "technology": "Docker/Docker Compose",
      "description": "Container orchestration and deployment configuration",
      "entry_point": "docker-compose.yml"
    }
  ],
  "scopes": [
    {
      "id": "SCOPE-001",
      "component_id": "COMP-001",
      "name": "Backend API Services",
      "description": "Core backend services for TradingView UDF protocol and ML data serving",
      "priority": "HIGH",
      "status": "IMPLEMENTED",
      "user_stories": [
        {
          "id": "US-001",
          "name": "TradingView UDF Protocol Implementation",
          "description": "As a TradingView chart, I want to fetch OHLC data through UDF protocol endpoints",
          "priority": "HIGH",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-001-001",
              "name": "History Data Endpoint",
              "description": "GET /history endpoint for OHLC candlestick data retrieval",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "acceptance_criteria": [
                "Returns OHLC data in TradingView UDF format",
                "Supports multiple timeframes (1min to 1day)",
                "Handles timestamp range filtering",
                "Returns appropriate error responses"
              ],
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/udf_handlers.py",
                    "functions": ["UDFHandler.get_history"],
                    "lines": "45-120"
                  },
                  {
                    "path": "backend/app/database.py",
                    "functions": ["DataManager.get_history"],
                    "lines": "132-191"
                  }
                ],
                "layer": "backend"
              },
              "test_coverage": {
                "unit_tests": [
                  {
                    "file": "tests/test_udf_handlers.py",
                    "functions": ["test_get_history_success", "test_get_history_error"]
                  }
                ]
              }
            },
            {
              "id": "TS-001-002",
              "name": "Configuration Endpoint",
              "description": "GET /config endpoint for TradingView chart configuration",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/udf_handlers.py",
                    "functions": ["UDFHandler.get_config"],
                    "lines": "25-44"
                  }
                ],
                "layer": "backend"
              }
            },
            {
              "id": "TS-001-003",
              "name": "Symbol Information Endpoint",
              "description": "GET /symbols endpoint for symbol metadata",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/udf_handlers.py",
                    "functions": ["UDFHandler.get_symbols"],
                    "lines": "121-150"
                  }
                ],
                "layer": "backend"
              }
            }
          ]
        },
        {
          "id": "US-002",
          "name": "ML Labels and Marks Integration",
          "description": "As a trader, I want to see ML-generated sentiment labels on the chart",
          "priority": "HIGH",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-002-001",
              "name": "Marks Endpoint",
              "description": "GET /marks endpoint for ML sentiment markers",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "acceptance_criteria": [
                "Returns ML labels with color coding",
                "Supports timeframe filtering",
                "Provides confidence scores",
                "Maps to chart timestamps"
              ],
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/routes/marks_asyncpg.py",
                    "functions": ["get_marks", "format_marks_response"],
                    "lines": "15-85"
                  }
                ],
                "layer": "backend"
              },
              "test_coverage": {
                "unit_tests": [
                  {
                    "file": "tests/test_marks.py",
                    "functions": ["test_get_marks_success"]
                  }
                ]
              }
            },
            {
              "id": "TS-002-002",
              "name": "Label Management API",
              "description": "POST/PUT endpoints for creating and updating ML labels",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/routes/labels.py",
                    "functions": ["create_label", "update_label"],
                    "lines": "20-120"
                  }
                ],
                "layer": "backend"
              }
            }
          ]
        },
        {
          "id": "US-003",
          "name": "System Health Monitoring",
          "description": "As a system administrator, I want to monitor system health and performance",
          "priority": "MEDIUM",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-003-001",
              "name": "Health Check Endpoint",
              "description": "GET /health endpoint for system status monitoring",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/monitoring.py",
                    "functions": ["health_monitor.get_health"],
                    "lines": "45-80"
                  }
                ],
                "layer": "backend"
              },
              "test_coverage": {
                "unit_tests": [
                  {
                    "file": "tests/test_monitoring.py",
                    "functions": ["test_health_endpoint"]
                  }
                ]
              }
            },
            {
              "id": "TS-003-002",
              "name": "Prometheus Metrics",
              "description": "GET /metrics endpoint for Prometheus monitoring",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/monitoring.py",
                    "functions": ["metrics_update_task", "track_request_metrics"],
                    "lines": "100-150"
                  }
                ],
                "layer": "backend"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "SCOPE-002",
      "component_id": "COMP-003",
      "name": "Database Management Layer",
      "description": "TimescaleDB operations for OHLC data storage and ML labels persistence",
      "priority": "HIGH",
      "status": "IMPLEMENTED",
      "user_stories": [
        {
          "id": "US-004",
          "name": "Time-Series Data Storage",
          "description": "As a system, I need to efficiently store and retrieve time-series OHLC data",
          "priority": "HIGH",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-004-001",
              "name": "Database Connection Management",
              "description": "Async connection pooling for TimescaleDB operations",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/database.py",
                    "functions": ["create_pool", "DataManager.__init__"],
                    "lines": "15-50"
                  }
                ],
                "layer": "database"
              },
              "test_coverage": {
                "integration_tests": [
                  {
                    "file": "tests/test_database_integration.py",
                    "functions": ["test_connection_pool"]
                  }
                ]
              }
            },
            {
              "id": "TS-004-002",
              "name": "Multi-Timeframe Data Aggregation",
              "description": "Database queries for different timeframe aggregations",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/database.py",
                    "functions": ["DataManager.get_history", "_normalize_timeframe"],
                    "lines": "132-191"
                  }
                ],
                "layer": "database"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "SCOPE-003",
      "component_id": "COMP-004",
      "name": "Caching System",
      "description": "Three-layer caching strategy for performance optimization",
      "priority": "HIGH",
      "status": "IMPLEMENTED",
      "user_stories": [
        {
          "id": "US-005",
          "name": "Performance Optimization",
          "description": "As a user, I want fast chart loading through efficient caching",
          "priority": "HIGH",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-005-001",
              "name": "Multi-Layer Cache Implementation",
              "description": "L1 (Memory) → L2 (Redis) → L3 (Database) caching strategy",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "acceptance_criteria": [
                "L1 cache serves data within 1ms",
                "L2 cache serves data within 5ms",
                "Cache hit rate > 80%",
                "Automatic cache invalidation"
              ],
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/cache.py",
                    "functions": ["CacheManager.get", "CacheManager.set"],
                    "lines": "37-77"
                  }
                ],
                "layer": "backend"
              },
              "test_coverage": {
                "unit_tests": [
                  {
                    "file": "tests/test_cache.py",
                    "functions": ["test_cache_layers", "test_cache_performance"]
                  }
                ]
              }
            },
            {
              "id": "TS-005-002",
              "name": "Cache Warmup Process",
              "description": "Preloading frequently accessed data into cache",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "scripts/cache_warmup.py",
                    "functions": ["warmup_cache", "preload_data"],
                    "lines": "25-100"
                  }
                ],
                "layer": "backend"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "SCOPE-004",
      "component_id": "COMP-002",
      "name": "Frontend Chart Interface",
      "description": "React-based TradingView chart interface with ML labels visualization",
      "priority": "HIGH",
      "status": "IMPLEMENTED",
      "user_stories": [
        {
          "id": "US-006",
          "name": "Interactive Chart Display",
          "description": "As a trader, I want to view interactive OHLC charts with ML sentiment indicators",
          "priority": "HIGH",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-006-001",
              "name": "Custom Chart Component",
              "description": "React component for TradingView chart with ML labels overlay",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "acceptance_criteria": [
                "Displays OHLC candlestick charts",
                "Shows ML sentiment markers",
                "Supports multiple timeframes",
                "Handles real-time data updates"
              ],
              "implementation": {
                "files": [
                  {
                    "path": "frontend/src/components/CustomChartWithMLLabels.tsx",
                    "functions": ["CustomChartWithMLLabels", "fetchBars", "fetchUserLabels"],
                    "lines": "162-220"
                  }
                ],
                "layer": "frontend"
              },
              "test_coverage": {
                "unit_tests": [
                  {
                    "file": "frontend/src/components/__tests__/CustomChartWithMLLabels.test.tsx",
                    "functions": ["test_chart_rendering", "test_ml_labels_display"]
                  }
                ]
              }
            },
            {
              "id": "TS-006-002",
              "name": "Timeframe Selection UI",
              "description": "UI controls for selecting different chart timeframes",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "frontend/src/App.tsx",
                    "functions": ["App", "handleTimeframeChange"],
                    "lines": "88-112"
                  }
                ],
                "layer": "frontend"
              }
            }
          ]
        },
        {
          "id": "US-007",
          "name": "System Monitoring Dashboard",
          "description": "As an administrator, I want to monitor system health through a dashboard",
          "priority": "MEDIUM",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-007-001",
              "name": "Health Status Header",
              "description": "Header component displaying system health indicators",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "frontend/src/components/Header.tsx",
                    "functions": ["Header", "HealthIndicator"],
                    "lines": "15-45"
                  }
                ],
                "layer": "frontend"
              }
            },
            {
              "id": "TS-007-002",
              "name": "Performance Metrics Sidebar",
              "description": "Sidebar component showing cache stats and performance metrics",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "frontend/src/components/Sidebar.tsx",
                    "functions": ["Sidebar", "CacheStatsDisplay"],
                    "lines": "20-80"
                  }
                ],
                "layer": "frontend"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "SCOPE-005",
      "component_id": "COMP-001",
      "name": "Security Layer",
      "description": "Security measures including CORS, input validation, and rate limiting",
      "priority": "HIGH",
      "status": "IMPLEMENTED",
      "user_stories": [
        {
          "id": "US-008",
          "name": "API Security",
          "description": "As a system, I need to protect against common web vulnerabilities",
          "priority": "HIGH",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-008-001",
              "name": "CORS Configuration",
              "description": "Cross-Origin Resource Sharing security configuration",
              "priority": "HIGH",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "backend/app/main.py",
                    "functions": ["create_app", "add_cors_middleware"],
                    "lines": "85-110"
                  }
                ],
                "layer": "backend"
              },
              "test_coverage": {
                "integration_tests": [
                  {
                    "file": "tests/test_security.py",
                    "functions": ["test_cors_headers"]
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "id": "SCOPE-006",
      "component_id": "COMP-005",
      "name": "Deployment Infrastructure",
      "description": "Container orchestration and deployment configuration",
      "priority": "MEDIUM",
      "status": "IMPLEMENTED",
      "user_stories": [
        {
          "id": "US-009",
          "name": "Containerized Deployment",
          "description": "As a DevOps engineer, I want to deploy the system using containers",
          "priority": "MEDIUM",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-009-001",
              "name": "Docker Compose Configuration",
              "description": "Multi-service Docker Compose setup for development and production",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "docker-compose.yml",
                    "functions": ["services.backend", "services.frontend", "services.redis"],
                    "lines": "1-55"
                  },
                  {
                    "path": "deployment/docker/docker-compose.prod.yml",
                    "functions": ["production_services"],
                    "lines": "1-80"
                  }
                ],
                "layer": "infrastructure"
              }
            },
            {
              "id": "TS-009-002",
              "name": "Load Testing Framework",
              "description": "Automated load testing and performance validation",
              "priority": "LOW",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "scripts/load_test.py",
                    "functions": ["run_load_test", "validate_performance"],
                    "lines": "25-120"
                  },
                  {
                    "path": "scripts/test_system.py",
                    "functions": ["system_performance_test"],
                    "lines": "15-80"
                  }
                ],
                "layer": "infrastructure"
              }
            }
          ]
        }
      ]
    },
    {
      "id": "SCOPE-007",
      "component_id": "COMP-002",
      "name": "Data Processing",
      "description": "ETL pipelines and real-time data synchronization",
      "priority": "MEDIUM",
      "status": "IMPLEMENTED",
      "user_stories": [
        {
          "id": "US-010",
          "name": "Data Pipeline Management",
          "description": "As a data engineer, I want to process and sync market data efficiently",
          "priority": "MEDIUM",
          "status": "IMPLEMENTED",
          "tech_specs": [
            {
              "id": "TS-010-001",
              "name": "Data Transformation Pipeline",
              "description": "ETL pipeline for processing raw market data",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "frontend/data_transformation_pipeline.py",
                    "functions": ["transform_ohlc_data", "process_ml_labels"],
                    "lines": "45-150"
                  }
                ],
                "layer": "backend"
              }
            },
            {
              "id": "TS-010-002",
              "name": "Real-time Data Sync",
              "description": "Service for synchronizing real-time market data",
              "priority": "MEDIUM",
              "status": "IMPLEMENTED",
              "implementation": {
                "files": [
                  {
                    "path": "frontend/real_time_sync_service.py",
                    "functions": ["sync_realtime_data", "update_ml_predictions"],
                    "lines": "25-100"
                  }
                ],
                "layer": "backend"
              }
            }
          ]
        }
      ]
    }
  ],
  "traceability_matrix": {
    "summary": {
      "total_requirements": {
        "SCOPE": 7,
        "USER_STORY": 10,
        "TECH_SPEC": 18
      },
      "total_test_cases": {
        "unit_tests": 8,
        "integration_tests": 2,
        "e2e_tests": 0,
        "total": 10
      },
      "total_implementations": {
        "backend_files": 12,
        "frontend_files": 8,
        "database_files": 2,
        "infrastructure_files": 6,
        "total_files": 28
      },
      "coverage_metrics": {
        "implementation_coverage": "100%",
        "test_coverage": "55.6%",
        "overall_coverage": "77.8%"
      }
    },
    "risk_assessment": {
      "high_risk_areas": [
        "Real-time data synchronization (limited test coverage)",
        "Performance under high load (requires monitoring)"
      ],
      "medium_risk_areas": [
        "Cache invalidation strategies",
        "Database migration procedures"
      ],
      "low_risk_areas": [
        "Chart visualization (well-tested)",
        "Basic API endpoints (comprehensive coverage)"
      ]
    },
    "compliance_matrix": {
      "security_requirements": "85%",
      "performance_requirements": "90%",
      "functionality_requirements": "100%",
      "maintainability_requirements": "80%"
    }
  }
}